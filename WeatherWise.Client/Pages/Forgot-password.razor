@page "/forgot-password"
@layout LoginLayout
@using System.Text.Json
@using MudBlazor
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<style>
    html, body {
    height: 100%;
    margin: 0;
    }

    .page-container {
    height: 100vh;
    width: 100vw;
    display: flex;
    justify-content: center;
    align-items: center;
    background-image: url('images/WeatherBG3.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    position: fixed;
    top: 0;
    left: 0;
    margin: 0;
    overflow: hidden;
    }

    .form-container {
    width: 400px;
    background-color: rgba(255, 255, 255, 0.9);
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    }

    .title {
    font-size: 32px;
    font-weight: 600;
    color: #333;
    margin-bottom: 4px;
    text-align: center;
    }

    .subtitle {
    color: #666;
    margin-bottom: 16px;
    text-align: center;
    }

    .tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
    }

    .tab {
    padding: 8px 16px;
    cursor: pointer;
    color: #666;
    }

    .tab.active {
    color: #6366F1;
    border-bottom: 2px solid #6366F1;
    }

    .input-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 16px;
    }
</style>

<div class="page-container">
    <div class="form-container">
        <div class="title">Reset Password</div>
        <div class="subtitle">We'll send you a reset link</div>


        <MudForm @ref="form" @bind-IsValid="isValid" Class="input-container">
            <MudTextField @bind-Value="email"
            Placeholder="Enter your email"
            Variant="Variant.Outlined"
            FullWidth="true"
            Margin="Margin.None"
            Required="true"
            OnKeyUp="HandleKeyPress"
            Validation="@(new Func<string, string>(ValidateEmail))" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudText Color="Color.Error">@errorMessage</MudText>
            }

            <MudButton Variant="Variant.Filled"
            Color="Color.Primary"
            FullWidth="true"
            Size="Size.Large"
            Disabled="@(!isValid || isSubmitting)"
            OnClick="Submit"
            Style="background-color: #6366F1; padding: 12px; font-weight: 500; margin-top: 8px;">
                @if (isSubmitting)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>SENDING...</span>
                }
                else
                {
                    <span>SEND RESET EMAIL</span>
                }
            </MudButton>

            <MudText Align="Align.Right" Style="margin-top: 8px;">
                <MudLink Href="javascript:void(0)"
                OnClick="NavigateToLogin"
                Underline="Underline.Hover"
                Style="color: #6366F1; font-size: 14px;">
                    Back to Login
                </MudLink>
            </MudText>
        </MudForm>
    </div>
</div>

@code {
    private MudForm form;
    private bool isValid = false;
    private bool isSubmitting = false;
    private string email = string.Empty;
    private string errorMessage = string.Empty;
    private bool successMessage = false;

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
        {
            return "Please enter a valid email address.";
        }
        return string.Empty;
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && isValid)
        {
            await Submit();
        }
    }

    private async Task Submit()
    {
        if (form.IsValid)
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            successMessage = false;

            try
            {
                var response = await HttpClient.PostAsync(
                    $"v1.0/auth/forgot-password?email={Uri.EscapeDataString(email)}",
                    null);

                if (response.IsSuccessStatusCode)
                {
                    var messageResponse = await response.Content.ReadFromJsonAsync<MessageResponse>();
                    if (messageResponse?.Message.Contains("sent") == true)
                    {
                        successMessage = true;
                        Snackbar.Add("Password reset email sent. Please check your inbox!", Severity.Success);
                        await Task.Delay(2000);
                        NavigationManager.NavigateTo("/login");
                    }
                    else
                    {
                        Snackbar.Add(errorMessage, Severity.Error);
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    var messageResponse = JsonSerializer.Deserialize<MessageResponse>(errorContent);
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                
                Snackbar.Add(errorMessage, Severity.Error);
            }
            finally
            {
                isSubmitting = false;
            }
        }
    }

   
    private class MessageResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}