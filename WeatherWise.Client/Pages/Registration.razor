@page "/register"
@layout LoginLayout
@using Microsoft.AspNetCore.Components.Web
@using WeatherWise.Client.Services
@using MudBlazor
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<div class="register-page">
    <div class="register-container">
        <div class="image-content">
            <img src="/images/signup-image.jpg" alt="Sign up illustration" />
        </div>

        <div class="form-content">
            <h1>Create Account</h1>

            <div class="form-group">
                <label for="email">Email</label>
                <MudTextField @bind-Value="email"
                              id="email"
                              Placeholder="Enter your email"
                              Variant="Variant.Outlined"
                              FullWidth="true"
                              Margin="Margin.None"
                              OnKeyUp="HandleKeyPress" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <MudTextField @bind-Value="password"
                              id="password"
                              Placeholder="Enter your password"
                              Variant="Variant.Outlined"
                              InputType="@passwordInputType"
                              FullWidth="true"
                              Margin="Margin.None"
                              OnKeyUp="HandleKeyPress"
                              Adornment="Adornment.End"
                              AdornmentIcon="@passwordIcon"
                              AdornmentAriaLabel="Show Password"
                              OnAdornmentClick="TogglePasswordVisibility" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <MudTextField @bind-Value="confirmPassword"
                              id="confirmPassword"
                              Placeholder="Confirm your password"
                              Variant="Variant.Outlined"
                              InputType="@confirmPasswordInputType"
                              FullWidth="true"
                              Margin="Margin.None"
                              OnKeyUp="HandleKeyPress"
                              Adornment="Adornment.End"
                              AdornmentIcon="@confirmPasswordIcon"
                              AdornmentAriaLabel="Show Password"
                              OnAdornmentClick="ToggleConfirmPasswordVisibility" />
            </div>

            <div class="form-group remember-me">
                <MudCheckBox @bind-Checked="termsAccepted" />
                <label for="terms">I agree all statements in <a href="#">Terms of service</a></label>
            </div>

            <div class="form-group">
                <button class="register-button" @onclick="HandleRegister" disabled="@(!termsAccepted)">
                    Register
                </button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }

            <button class="already-member" @onclick="NavigateToLogin">I am already a member</button>
        </div>
    </div>
</div>

<style>
    .register-page {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f9f9f9;
        font-family: 'Segoe UI', sans-serif;
    }

    .register-container {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        max-width: 900px;
        width: 100%;
    }

    .image-content {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .image-content img {
            max-width: 100%;
            height: auto;
            border-radius: 10px;
        }

    .form-content {
        flex: 1;
        padding-left: 2rem;
    }

        .form-content h1 {
            font-size: 2rem;
            margin-bottom: 1.5rem;
            color: #333;
        }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #333;
        }

        .form-group.remember-me {
            display: flex;
            align-items: center;
            margin: 1rem 0;
        }

            .form-group.remember-me label {
                margin-left: 0.5rem;
                font-size: 0.9rem;
                color: #555;
            }

    .already-member {
        display: block;
        margin-top: 1rem;
        width: 100%;
        text-align: center;
        font-size: 0.9rem;
        color: #555;
        text-decoration: none;
        background: none;
        border: none;
        cursor: pointer;
    }

        .already-member:hover {
            text-decoration: underline;
        }

    .register-button {
        width: 100%;
        padding: 0.8rem;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .register-button:hover {
            background-color: #0056b3;
        }

        .register-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

    .error-message {
        margin-top: 1rem;
        padding: 0.8rem;
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        font-size: 0.9rem;
    }

    @@media (max-width: 768px) {
        .register-container {
            flex-direction: column;
            padding: 1.5rem;
        }

        .image-content {
            margin-bottom: 1.5rem;
        }

        .form-content {
            padding-left: 0;
        }
    }
</style>

@code {
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private bool termsAccepted = false;

    // Password visibility
    private bool passwordVisible = false;
    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;

    private bool confirmPasswordVisible = false;
    private InputType confirmPasswordInputType = InputType.Password;
    private string confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task HandleRegister()
    {
        errorMessage = "";

        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@") || !email.Contains("."))
        {
            Snackbar.Add("Please enter a valid email address", Severity.Error);
            return;
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            Snackbar.Add("Please enter a password", Severity.Error);
            return;
        }

        if (password != confirmPassword)
        {
            Snackbar.Add("Passwords do not match", Severity.Error);
            return;
        }

        try
        {
            var result = await AuthService.Register(email, password);
            if (result)
            {
                Snackbar.Add("Registration successful! Please log in.", Severity.Success);
                Navigation.NavigateTo("/login");
            }
            else
            {
                Snackbar.Add("Registration failed. Email might already be in use.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleRegister();
        }
    }

    private void TogglePasswordVisibility()
    {
        passwordVisible = !passwordVisible;
        passwordInputType = passwordVisible ? InputType.Text : InputType.Password;
        passwordIcon = passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        confirmPasswordVisible = !confirmPasswordVisible;
        confirmPasswordInputType = confirmPasswordVisible ? InputType.Text : InputType.Password;
        confirmPasswordIcon = confirmPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }
}