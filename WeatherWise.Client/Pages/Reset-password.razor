@page "/reset-password"
@layout LoginLayout
@using System.Text.Json
@using MudBlazor
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<div class="page-container">
    <div class="form-container">
        <div class="title">Reset Password</div>
        <div class="subtitle">Create your new password</div>


        <MudForm @ref="form" @bind-IsValid="isValid" Validation="@(new Func<object, string>(ValidateForm))" Class="input-container">
            <MudTextField @bind-Value="accessToken"
            Class="d-none"
            Placeholder="Enter your reset token"
            Variant="Variant.Outlined"
            FullWidth="true"
            Required="true"
            For="@(() => accessToken)"
            HelperText="Enter the token from the reset email"
            Disabled="@isTokenFromUrl" />

            <MudTextField @bind-Value="newPassword"
            Placeholder="Enter your new password"
            Variant="Variant.Outlined"
            FullWidth="true"
            Required="true"
            For="@(() => newPassword)"
            InputType="@(showNewPassword ? InputType.Text : InputType.Password)"
            HelperText="Password must be at least 6 characters"
            Adornment="Adornment.End"
            AdornmentIcon="@(showNewPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
            AdornmentAriaLabel="Show Password"
            OnAdornmentClick="@(() => showNewPassword = !showNewPassword)" />

            <MudTextField @bind-Value="confirmPassword"
            Placeholder="Confirm your new password"
            Variant="Variant.Outlined"
            FullWidth="true"
            Required="true"
            For="@(() => confirmPassword)"
            InputType="@(showConfirmPassword ? InputType.Text : InputType.Password)"
            HelperText="Enter the same password again"
            Adornment="Adornment.End"
            AdornmentIcon="@(showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
            AdornmentAriaLabel="Show Password"
            OnAdornmentClick="@(() => showConfirmPassword = !showConfirmPassword)" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudText Color="Color.Error">@errorMessage</MudText>
            }

            <MudButton Variant="Variant.Filled"
            Color="Color.Primary"
            FullWidth="true"
            Disabled="@(!isValid || isSubmitting)"
            OnClick="Submit"
            Class="reset-button"
            Style="height: auto;">
                @if (isSubmitting)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>PROCESSING...</span>
                }
                else
                {
                    <span>RESET PASSWORD</span>
                }
            </MudButton>

            <div class="back-to-login">
                <a href="javascript:void(0)" @onclick="NavigateToLogin">Back to Login</a>
            </div>
        </MudForm>
    </div>
</div>  


<style>
    html, body {
        height: 100%;
        margin: 0;
    }

    .page-container {
        height: 100vh;
        width: 100vw;
        display: flex;
        justify-content: center;
        align-items: center;
        background-image: url('images/WeatherBG3.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        position: fixed;
        top: 0;
        left: 0;
        margin: 0;
        overflow: hidden;
    }

    .form-container {
        width: 350px;
        background-color: rgba(255, 255, 255, 0.9);
        padding: 25px 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .title {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin-bottom: 2px;
        text-align: center;
    }

    .subtitle {
        color: #666;
        margin-bottom: 12px;
        text-align: center;
    }

    .tabs {
        display: flex;
        justify-content: center;
        margin-bottom: 15px;
    }

    .tab {
        padding: 8px 16px;
        cursor: pointer;
        color: #666;
    }

        .tab.active {
            color: #6366F1;
            border-bottom: 2px solid #6366F1;
        }

    .input-container {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .reset-button {
        width: 100%;
        padding: 10px;
        background-color: #6366F1;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        margin-top: 12px;
    }

    .back-to-login {
        text-align: right;
        width: 100%;
        margin-top: 12px;
    }

        .back-to-login a {
            color: #6366F1;
            text-decoration: none;
            font-size: 14px;
        }

            .back-to-login a:hover {
                text-decoration: underline;
            }
</style>


@code {
    private MudForm form;
    private bool isValid = false;
    private bool isSubmitting = false;
    private string accessToken = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private bool successMessage = false;
    private bool isTokenFromUrl = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    protected override void OnInitialized()
    {
        // Extract access_token from URL (both query parameter and fragment)
        var uri = new Uri(NavigationManager.Uri);

        // Check query parameters
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        accessToken = query["access_token"];

        // If not found in query, check fragment
        if (string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(uri.Fragment))
        {
            var fragment = uri.Fragment.TrimStart('#');
            var fragmentParams = System.Web.HttpUtility.ParseQueryString(fragment);
            accessToken = fragmentParams["access_token"];
        }

        if (!string.IsNullOrEmpty(accessToken))
        {
            isTokenFromUrl = true;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private string ValidateForm(object value)
    {
        if (string.IsNullOrWhiteSpace(accessToken))
        {
            return "Reset token is required.";
        }
        if (string.IsNullOrWhiteSpace(newPassword) || newPassword.Length < 6)
        {
            return "Password must be at least 6 characters long.";
        }
        if (newPassword != confirmPassword)
        {
            return "Passwords do not match.";
        }
        return string.Empty;
    }

    private async Task Submit()
    {
        if (form.IsValid)
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            successMessage = false;

            try
            {
                var response = await HttpClient.PostAsync(
                    $"v1.0/auth/reset-password?accessToken={Uri.EscapeDataString(accessToken)}&newPassword={Uri.EscapeDataString(newPassword)}&confirmPassword={Uri.EscapeDataString(confirmPassword)}",
                    null);

                if (response.IsSuccessStatusCode)
                {
                    var messageResponse = await response.Content.ReadFromJsonAsync<MessageResponse>();
                    if (messageResponse?.Message.Contains("successfully") == true)
                    {
                        successMessage = true;
                        Snackbar.Add("Password reset successfully!", Severity.Success);
                        await Task.Delay(2000); // Delay to show success message
                        NavigationManager.NavigateTo("/login");
                    }
                    else
                    {
                        errorMessage = messageResponse?.Message ?? "Failed to reset password. Please try again.";
                        Snackbar.Add(errorMessage, Severity.Error);
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    var messageResponse = JsonSerializer.Deserialize<MessageResponse>(errorContent);
                    errorMessage = messageResponse?.Message ?? $"Failed to reset password: {response.ReasonPhrase}";
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
                Snackbar.Add(errorMessage, Severity.Error);
            }
            finally
            {
                isSubmitting = false;
            }
        }
    }

    private class MessageResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}